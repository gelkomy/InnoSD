'''
% This file receives pxx: a dataFrame of electrodes data
% for each window and returns a dictionary of list of features data indexed
% by electrodes names
% dict = {electrode_name : [list of features]}
% 
% /**************************************************************************** 
%  * Job:             calculate features for each electrode                   * 
%  *                                                                          * 
%  * Generated on:    Sun, May 14, 2017                                       * 
%  * Generated by:    Emad                                                    * 
%  * Version:         1                                                       * 
%  ****************************************************************************/ 
'''



import pandas as pd
import math

def calculate_features(pxx):

    #pxx = pd.DataFrame(np.random.randint(0,10,size=(128, 2)), columns=list('AB'))  #for testing purpose

    res_dict = {}
    count = 0

    for column in pxx:
        
        f = []

        p1 = pxx[column][3:8].sum()
        f.append(p1)

        p2 = pxx[column][7:13].sum()
        f.append(p2)

        p3 = pxx[column][12:30].sum()
        f.append(p3)

        p4 = pxx[column][29:50].sum()
        f.append(p4)

        p5 = pxx[column][49:56].sum() + pxx[column][63:70].sum()
        f.append(p5)

        p6 = pxx[column][69:90].sum()
        f.append(p6)

        p7 = pxx[column][89:110].sum()
        f.append(p7)

        p8 = pxx[column][109:116].sum() + pxx[column][123:128].sum()
        f.append(p8)

        f= [float(x) for x in f]
        
        total_p = sum(f)

        
        p = []

        #Absolute PSD: (features 1->8)
        for i in f: 
            p.append(math.log10(i))

        #Relative PSD: (features 9->16)
        for i in f:
            p.append(math.log10(i/total_p))

        #PSD ratios
        for i in range(7):
            for j in range(i+1,8):
                p.append(p[i]-p[j])

        res_dict[pxx.columns[count]] = p
        count += 1

    return res_dict
